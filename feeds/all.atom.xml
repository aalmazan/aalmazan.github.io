<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Allan Almazan</title><link href="https://blog.aalmazan.com/" rel="alternate"></link><link href="https://blog.aalmazan.com/feeds/all.atom.xml" rel="self"></link><id>https://blog.aalmazan.com/</id><updated>2024-01-11T00:00:00-08:00</updated><subtitle>A personal blog</subtitle><entry><title>TODO: Everything</title><link href="https://blog.aalmazan.com/posts/2024-01-todo-everything-begins.html" rel="alternate"></link><published>2024-01-11T00:00:00-08:00</published><updated>2024-01-11T00:00:00-08:00</updated><author><name>Allan Almazan</name></author><id>tag:blog.aalmazan.com,2024-01-11:/posts/2024-01-todo-everything-begins.html</id><summary type="html">&lt;p&gt;What the TODO: Everything project is and why.&lt;/p&gt;</summary><content type="html">&lt;p&gt;New year, more personal projects to procrastinate on.&lt;/p&gt;
&lt;p&gt;A few years ago I thought an idea called "TODO Everything" which can be summed up as "The TODO app that does
everything." I had ideas of grandeur where it would have every feature imaginable; integrate a bunch of different
services; &lt;em&gt;be&lt;/em&gt; a bunch of different services; have complex backend systems that would do anything you need. It's an
insane idea, and I always loved thinking
about it. Essentially, it's something like a "Scope Creep Simulator", or maybe the absolute opposite of
what &lt;a href="https://en.wikipedia.org/wiki/Code_golf"&gt;code golf&lt;/a&gt; is.&lt;/p&gt;
&lt;p&gt;The purpose of Todo apps is pretty simple: people need toy/example/test apps to build, especially when learning a new
language/framework/platform/etcetera. In the web app world there's a few that come to mind: blogs, social media clones,
and Todo apps. Essentially, they're just &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt; apps with
a database (or some type of data storage) that can maybe have multiple users and maybe a few actions can be done (i.e.
completing a Todo item, or liking a post). That's it.&lt;/p&gt;
&lt;p&gt;Of course, you'd want the scope to be minimal since you're just learning your shiny new language or tool, but it can get
exponentially more interesting when you silence your inner &lt;em&gt;Project Manager/Lead Developer&lt;/em&gt; and tell yourself, "You know
what? We &lt;em&gt;can&lt;/em&gt; add a few more weeks to this feature in order to get it working on a local Kubernetes cluster running on
your Raspberry Pis."&lt;/p&gt;
&lt;p&gt;So, a month or so ago that's what I did. I've engineered myself into corners and bulldozed those walls to create even
more corners, but it has been interesting and mostly fun to work on. Will this be a major start up that will change
people's lives for the better and solve global healthcare? No. 99.999% guaranteed to do nothing, but some learning's
getting done, maybe it'll help other people as well.&lt;/p&gt;
&lt;p&gt;I've created the GitHub organization &lt;a href="https://github.com/todo-everything"&gt;todo-everything&lt;/a&gt; that will house everything
"TODO: Everything" (actual "real" name not confirmed). So far the following are up in mostly working condition with an
infinity of features left to go.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Backend written in Python + Django. Mainly using Django for its ORM
  and &lt;a href="https://www.django-rest-framework.org/"&gt;&lt;code&gt;django-rest-framework&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/todo-everything/todo-everything-django"&gt;https://github.com/todo-everything/todo-everything-django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A frontend written in TypeScript using &lt;a href="https://www.solidjs.com/"&gt;SolidJS&lt;/a&gt; and &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; (
  the &lt;code&gt;solid-ts&lt;/code&gt; vite template). This was written first to get a feel for
  the API. Probably should be written later, but that's a story for a different post.&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/todo-everything/todo-everything-solid"&gt;https://github.com/todo-everything/todo-everything-solid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Another frontend written TypeScript using &lt;a href="https://react.dev/"&gt;React&lt;/a&gt;, &lt;a href="https://swc.rs/"&gt;SWC&lt;/a&gt; and
  also &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; (&lt;code&gt;react-swc-ts&lt;/code&gt; template).&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/todo-everything/todo-everything-react"&gt;https://github.com/todo-everything/todo-everything-react&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Everything OPs related. So far just some Ansible and Kubernetes files, but it also supports ARM because of Raspberry
  Pis.&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/todo-everything/todo-everything-ops"&gt;https://github.com/todo-everything/todo-everything-ops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've learned more in the past few months than I have even in some other jobs since it's completely void of any
"business" and "logic". At least for now. Hah, but no this will almost never be a viable business idea. I do have a
feature idea for &lt;code&gt;todo-everything&lt;/code&gt;, though, that would integrate Stripe (initially) charge a user a metered rate for
each Todo item the create and complete. Another very wild idea, but I think I've actually seen a variant of that on an
existing iOS Todo app... Future post ideas are abundant, but that's the end of this one for now.&lt;/p&gt;
&lt;p&gt;Dreaming big and making my backlog infinite when time is very much limited. This is 2024.&lt;/p&gt;</content><category term="projects"></category><category term="todo-everything"></category><category term="programming"></category></entry><entry><title>Getting more familiar with Kubernetes (and the Raspberry Pis to prove it) Part 1</title><link href="https://blog.aalmazan.com/posts/2023-11-kubernetes-rpi-pt-1.html" rel="alternate"></link><published>2023-11-15T00:00:00-08:00</published><updated>2023-11-19T00:00:00-08:00</updated><author><name>Allan Almazan</name></author><id>tag:blog.aalmazan.com,2023-11-15:/posts/2023-11-kubernetes-rpi-pt-1.html</id><summary type="html">&lt;p&gt;I made a Kubernetes cluster with a few Raspberry Pis. Was it worth it?&lt;/p&gt;</summary><content type="html">&lt;p&gt;I started this project over a year ago on a whim. At &lt;code&gt;$DAY_JOB&lt;/code&gt; I had to interact with Kubernetes,
but there were times when I felt uneasy doing &lt;em&gt;anything&lt;/em&gt; with it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ME: So just run: &lt;code&gt;kubectl apply -f maybe-a-scary-production-deployment.yml&lt;/code&gt; to update the staging
server?&lt;/p&gt;
&lt;p&gt;THEM: Yeah, after that you're good to go.&lt;/p&gt;
&lt;p&gt;ME: But it says production in the filename.&lt;/p&gt;
&lt;p&gt;THEM: Yeah, it's fine. You should have some settings that point you to the staging cluster. It's
fine.&lt;/p&gt;
&lt;p&gt;ME: Hmmm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've spent over 10 years working across the stack in terms of building
sites/applications/infrastructure, but when it came to Kubernetes, it always felt like a mystical
force that granted you &lt;em&gt;Zero-Downtime&lt;/em&gt;. It was time for that to change.&lt;/p&gt;
&lt;h2 id="the-beginning"&gt;The beginning&lt;/h2&gt;
&lt;p&gt;I tried &lt;a href="https://kubernetes.io/docs/tutorials/"&gt;Kubernetes tutorials&lt;/a&gt;, official and otherwise. The
terms make sense. I just needed more practical usage. I was also experimenting with (micro) services
architecture, so my eyes opened wide when I saw this Udemy course on
sale: &lt;a href="https://www.udemy.com/share/102VKE3@NvvIV6zas3ZRCkOZ-CK1CvlzrQbw3VaIn_MMF81SNtGH5RrXe8g4Lhcs2yt1e3x2qw==/"&gt;Microservices with Node JS and React&lt;/a&gt;.
I purchased the course (July 2022) when it was $20, and at the time of writing, it's now at a
whopping $130. For the amount of content the course has, it's definitely worth $20 -- unsure if I'd
pay $130 if you already have general full stack knowledge of web applications.&lt;/p&gt;
&lt;p&gt;After going through bits of the course, I quickly found out that running Kubernetes locally is kind
of annoying and took up lots of resources. I didn't want to deal with creating and managing an
AWS/GCP/etc. account, but surely I can build my own without having to build a $1,000+ server.&lt;/p&gt;
&lt;p&gt;Thankfully, I ran into this YouTube video (the YouTube algorithm knows too
much): "&lt;a href="https://www.youtube.com/watch?v=X9fSMGkjtug"&gt;i built a Raspberry Pi SUPER COMPUTER!!&lt;/a&gt;".
Very useful video (IMO) for getting started, but apologies in advance if this type of content is
not for you. If you'd prefer not to watch the video and are familiar with YAML, skip ahead. I'll
also put a link at the end for a GitHub repository that contains setup information for your
Raspberry Pi nodes.&lt;/p&gt;
&lt;p&gt;Generally, the video above goes through setup from start-to-cluster-ready. The rest of this will
focus on my personal experience with whatever tweaks/optimizations I made along the way.&lt;/p&gt;
&lt;h2 id="hardware-assembly"&gt;Hardware assembly&lt;/h2&gt;
&lt;p&gt;I've managed to keep spares of lots of things, especially cables. When the time comes to use the
things I've been stashing for years, I get excited -- then disappointed because it probably wasn't
worth lugging around 3+ moves "just in case" I need it. True that I used a few spare things in
storage, but the majority of the cost was still the Pis and case. Anyway, parts list below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Netgear unmanaged switch&lt;/li&gt;
&lt;li&gt;4x Raspberry Pi 4&lt;/li&gt;
&lt;li&gt;CAT6 cables&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/B07D7PDLXC/"&gt;3x SAMSUNG FIT Plus 3.1 USB Flash Drive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/B07D5MJ7PQ/"&gt;C4Labs Cluster Case for Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/B0BBFP95GD"&gt;3-pack short USB-C cables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/B00P933OJC"&gt;Anker 60W 6-Port USB Wall Charger&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;NOTE: This is potentially not enough to power all 3 Pis at full load.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="flex flex-col justify-center text-center"&gt;
    &lt;img class="m-0" alt="Raspberry Pi cluster" src="../images/pi-cluster-side.jpg" /&gt;
    &lt;small&gt;Final result with terrible cable management&lt;/small&gt;
&lt;/div&gt;

&lt;h2 id="raspberry-pi-setup"&gt;Raspberry Pi setup&lt;/h2&gt;
&lt;p&gt;Once all that was assembled, time to get thing dang things up and running. Below are some general
instructions on what I did. The YouTube video above by NetworkChuck has a more detailed explanation
of how to do everything. I will also have a link to a GitHub repo containing these instructions and
some other helpful things I use to automate some minor tasks.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use the
   official &lt;a href="https://www.raspberrypi.com/documentation/computers/getting-started.html#installing-the-operating-system"&gt;Raspberry Pi Imager&lt;/a&gt;,
   or your preferred method, to get an operating system on your USB drives.&lt;/li&gt;
&lt;li&gt;Create and update some files on the USB drives &lt;em&gt;before&lt;/em&gt; inserting and running on your Pis:&lt;ol&gt;
&lt;li&gt;In the &lt;code&gt;[THE_USB_DRIVE]/boot&lt;/code&gt; directory create an empty file with the filename &lt;code&gt;ssh&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;touch [THE_USB_DRIVE]/boot/ssh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;[THE_USB_DRIVE]/boot/config.txt&lt;/code&gt; add a line containing &lt;code&gt;arm_64bit=1&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;echo arm_64bit=1 &amp;gt;&amp;gt; [THE_USB_DRIVE]/boot/config.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(New to me) the official imager can now also set up SSH access. On the link above search
   for "Enable SSH".&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;At this point you can put the drives in, connect your network cables, and get them running&lt;/li&gt;
&lt;li&gt;Find your Pis on your network. Easiest way is to check your router's settings.&lt;/li&gt;
&lt;li&gt;(On each Pi) &lt;code&gt;ssh pi@[YOUR_PI_IP]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;NOTE: &lt;code&gt;pi&lt;/code&gt; is the default username and &lt;code&gt;raspberry&lt;/code&gt; is the default password.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ensure every Pi is confirmed on the network and you now have the beginnings to a cluster!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="to-be-continued"&gt;To be continued&lt;/h2&gt;
&lt;p&gt;This has been getting long-ish to write, so I'll take a break here and get back to the remainder on
the next post. For more instructions and an Ansible playbook to get started take a look at my
&lt;a href="https://github.com/aalmazan/rpi-ops"&gt;rpi-ops&lt;/a&gt; GitHub repository.&lt;/p&gt;</content><category term="projects"></category><category term="projects"></category><category term="kubernetes"></category><category term="hardware"></category><category term="linux"></category></entry><entry><title>The blog</title><link href="https://blog.aalmazan.com/posts/2023-11-the-blog.html" rel="alternate"></link><published>2023-11-12T00:00:00-08:00</published><updated>2023-11-12T00:00:00-08:00</updated><author><name>Allan Almazan</name></author><id>tag:blog.aalmazan.com,2023-11-12:/posts/2023-11-the-blog.html</id><summary type="html">&lt;p&gt;A more detailed look into more technical things about this blog.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a more detailed look into the bits and pieces that make up this blog. For a quick overview,
take a look at the &lt;a href="https://blog.aalmazan.com/pages/about.html"&gt;about page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="failed-beginnings"&gt;Failed beginnings&lt;/h3&gt;
&lt;p&gt;As mentioned in the about page, this is the end-result of dreams of grandeur, at least from an
engineering perspective. This was always meant to be on some type of static site generator, but
why &lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;Short answer: Because it uses Python. &lt;br /&gt;
Longer answer: Because it uses Python and I spent too much time looking up themes, theming
documentation, and scaffolding to give up on Pelican now.&lt;/p&gt;
&lt;p&gt;Does it take a lot of time to set up Pelican and get this all started? No, but I definitely made my
best efforts to do so. The themes list provided at &lt;a href="https://pelicanthemes.com/"&gt;pelicanthemes.com&lt;/a&gt;
are a great resource. &lt;code&gt;Flex&lt;/code&gt;, &lt;code&gt;crowsfoot&lt;/code&gt; and &lt;code&gt;cid&lt;/code&gt; were my top choices, but they all had just &lt;em&gt;too
much&lt;/em&gt; extra fluff I didn't want to spend ripping out, so I started mostly from scratch with &lt;code&gt;cid&lt;/code&gt; as
the base.&lt;/p&gt;
&lt;div class="not-prose flex justify-center align-items-center"&gt;
&lt;svg class="fill-current h-5 w-5" clip-rule="evenodd" fill-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2" viewBox="0 0 24 24.001" xmlns="http://www.w3.org/2000/svg"&gt;
&lt;path d="m22.196 5.6726c-2.1185-3.4041-5.8947-5.6726-10.197-5.6726-6.6233 0-11.999 5.3773-11.999 11.999 0 6.6245 5.3761 12.002 11.999 12.002 6.2956 0 11.466-4.8588 11.962-11.028 0.02881-0.36249-0.22686-0.97344-0.89902-0.97344-0.46932 0-0.85822 0.36009-0.89662 0.82821-0.4213 5.2441-4.8156 9.3731-10.167 9.3731-5.6294 0-10.199-4.5707-10.199-10.201 0-5.6282 4.5695-10.199 10.199-10.199 3.6453 0 6.8465 1.9169 8.6494 4.7952l-2.3898 6e-3c-0.49692 0-0.90022 0.4033-0.90022 0.90022s0.4033 0.90023 0.90022 0.90023h4.8408c0.49692 0 0.90022-0.4033 0.90022-0.90023v-4.86c0-0.49692-0.4033-0.90022-0.90022-0.90022s-0.90022 0.4021-0.90022 0.90022zm-11.405 0.025206 0.0084 6.6773c0 0.34569 0.19805 0.66016 0.50893 0.8102l4.7748 2.3142c0.44771 0.21605 0.98545 0.02881 1.2015-0.4189 0.21605-0.44771 0.02881-0.98545-0.4189-1.2015l-4.2671-2.0705-0.0072-6.1131c0-0.49692-0.4045-0.90023-0.90022-0.89902-0.49692 0-0.90022 0.4045-0.90022 0.90143z" fill="#fff" fill-rule="nonzero" stroke-width="1.2003"/&gt;
&lt;/svg&gt;
&lt;/div&gt;

&lt;p&gt;Days and hours later...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://getbootstrap.com/"&gt;Bootstrap 5&lt;/a&gt; is looking good these days isn't it? It even has utility
classes like &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt;. And!
This &lt;a href="https://startbootstrap.com/previews/clean-blog"&gt;Clean Blog Theme&lt;/a&gt; looks excellent with
Bootstrap as its base.&lt;/p&gt;
&lt;div class="not-prose flex justify-center align-items-center"&gt;
&lt;svg class="fill-current h-5 w-5" clip-rule="evenodd" fill-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2" viewBox="0 0 24 24.001" xmlns="http://www.w3.org/2000/svg"&gt;
&lt;path d="m22.196 5.6726c-2.1185-3.4041-5.8947-5.6726-10.197-5.6726-6.6233 0-11.999 5.3773-11.999 11.999 0 6.6245 5.3761 12.002 11.999 12.002 6.2956 0 11.466-4.8588 11.962-11.028 0.02881-0.36249-0.22686-0.97344-0.89902-0.97344-0.46932 0-0.85822 0.36009-0.89662 0.82821-0.4213 5.2441-4.8156 9.3731-10.167 9.3731-5.6294 0-10.199-4.5707-10.199-10.201 0-5.6282 4.5695-10.199 10.199-10.199 3.6453 0 6.8465 1.9169 8.6494 4.7952l-2.3898 6e-3c-0.49692 0-0.90022 0.4033-0.90022 0.90022s0.4033 0.90023 0.90022 0.90023h4.8408c0.49692 0 0.90022-0.4033 0.90022-0.90023v-4.86c0-0.49692-0.4033-0.90022-0.90022-0.90022s-0.90022 0.4021-0.90022 0.90022zm-11.405 0.025206 0.0084 6.6773c0 0.34569 0.19805 0.66016 0.50893 0.8102l4.7748 2.3142c0.44771 0.21605 0.98545 0.02881 1.2015-0.4189 0.21605-0.44771 0.02881-0.98545-0.4189-1.2015l-4.2671-2.0705-0.0072-6.1131c0-0.49692-0.4045-0.90023-0.90022-0.89902-0.49692 0-0.90022 0.4045-0.90022 0.90143z" fill="#fff" fill-rule="nonzero" stroke-width="1.2003"/&gt;
&lt;/svg&gt;
&lt;/div&gt;

&lt;p&gt;OK no more. Time to focus. My constraints will be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be minimal&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maybe use &lt;a href="https://daisyui.com/"&gt;daisyUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dark theme&lt;/li&gt;
&lt;li&gt;Focus on maintainability (basically 1-3)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For Tailwind CSS, I
discovered &lt;a href="https://gist.github.com/jorritfolmer/1987cd125ec4072f3c454a5b8ab2e345"&gt;this nice gist&lt;/a&gt;
to get started on the frontend build side of things. In short:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;postcss&lt;/code&gt; as a preprocessor&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;tailwindcss&lt;/code&gt; and &lt;code&gt;autoprefixer&lt;/code&gt; as postcss plugins&lt;/li&gt;
&lt;li&gt;Add theme templates and content directories (my content markdown also has custom HTML included)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;cssnano&lt;/code&gt; to minify the resulting CSS from above&lt;/li&gt;
&lt;li&gt;For development, use something like below where &lt;code&gt;styles.css&lt;/code&gt; contains your &lt;code&gt;@tailwind&lt;/code&gt;
  directives (&lt;a href="https://tailwindcss.com/docs/installation"&gt;see docs&lt;/a&gt;):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="not-prose"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tw-watch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tailwindcss -i ./themes/YOUR_THEME/css/styles.css -o ./themes/YOUR_THEME/static/css/styles.css --watch&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;div class="not-prose flex justify-center align-items-center"&gt;
&lt;svg class="fill-current h-5 w-5" clip-rule="evenodd" fill-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2" viewBox="0 0 24 24.001" xmlns="http://www.w3.org/2000/svg"&gt;
&lt;path d="m22.196 5.6726c-2.1185-3.4041-5.8947-5.6726-10.197-5.6726-6.6233 0-11.999 5.3773-11.999 11.999 0 6.6245 5.3761 12.002 11.999 12.002 6.2956 0 11.466-4.8588 11.962-11.028 0.02881-0.36249-0.22686-0.97344-0.89902-0.97344-0.46932 0-0.85822 0.36009-0.89662 0.82821-0.4213 5.2441-4.8156 9.3731-10.167 9.3731-5.6294 0-10.199-4.5707-10.199-10.201 0-5.6282 4.5695-10.199 10.199-10.199 3.6453 0 6.8465 1.9169 8.6494 4.7952l-2.3898 6e-3c-0.49692 0-0.90022 0.4033-0.90022 0.90022s0.4033 0.90023 0.90022 0.90023h4.8408c0.49692 0 0.90022-0.4033 0.90022-0.90023v-4.86c0-0.49692-0.4033-0.90022-0.90022-0.90022s-0.90022 0.4021-0.90022 0.90022zm-11.405 0.025206 0.0084 6.6773c0 0.34569 0.19805 0.66016 0.50893 0.8102l4.7748 2.3142c0.44771 0.21605 0.98545 0.02881 1.2015-0.4189 0.21605-0.44771 0.02881-0.98545-0.4189-1.2015l-4.2671-2.0705-0.0072-6.1131c0-0.49692-0.4045-0.90023-0.90022-0.89902-0.49692 0-0.90022 0.4045-0.90022 0.90143z" fill="#fff" fill-rule="nonzero" stroke-width="1.2003"/&gt;
&lt;/svg&gt;
&lt;/div&gt;

&lt;h3 id="what-next"&gt;What next?&lt;/h3&gt;
&lt;p&gt;Blog seems to be done now with frontend processing and static site generator templates. All that's
left to do is the more interesting parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Figure out production deployment processes&lt;/li&gt;
&lt;li&gt;Hosting and automatic deploys with GitHub Actions?&lt;/li&gt;
&lt;li&gt;Analytics? (Please don't hate me if I use Google Analytics)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I suppose at this point something will be publicly online -- and that's the hardest part, even if
there are a few (or more) warts and blemishes.&lt;/p&gt;</content><category term="blog"></category><category term="programming"></category></entry></feed>